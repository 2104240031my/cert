mod cert;

use chrono::Duration;
use chrono::Utc;
use cryptopkg::crypto::sha3::Sha3256;
use cryptopkg::crypto::feature::Hash;
use crate::cert::certificate::SignAlgorithm;
use crate::cert::certificate::CertificateSubjectAuthOnly;

fn main() {

    let privkey = [
        0x9d, 0x61, 0xb1, 0x9d, 0xef, 0xfd, 0x5a, 0x60, 0xba, 0x84, 0x4a, 0xf4, 0x92, 0xec, 0x2c, 0xc4,
        0x44, 0x49, 0xc5, 0x69, 0x7b, 0x32, 0x69, 0x19, 0x70, 0x3b, 0xac, 0x03, 0x1c, 0xae, 0x7f, 0x60
    ];

    let pubkey = [
        0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe, 0xd3, 0xc9, 0x64, 0x07, 0x3a,
        0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6, 0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a
    ];

    let mut keypair_id = [0x00u8; Sha3256::MESSAGE_DIGEST_LEN];
    Sha3256::digest_oneshot(&pubkey[..], &mut keypair_id[..]).unwrap();

    let not_before = Utc::now();
    let not_after = not_before - Duration::days(365);

    let cert = CertificateSubjectAuthOnly::new(
        SignAlgorithm::Ed25519,
        &privkey[..],
        &keypair_id[..],
        2104240029,
        not_before.timestamp() as u64,
        not_after.timestamp() as u64
    ).unwrap();

    cert.verify(&pubkey[..]).unwrap();

}